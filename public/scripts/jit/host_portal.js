// generated by JITBrowserify on 5/26/2021, 4:04:41 PM
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

module.exports = {
    prefix: "data-nidget",
    elementAttribute: "data-nidget-element",
    srcAttribute: "src",
    templateSrcAttribute: "template-src",
    nameAttribute: "name",
    interfaceAttribute: "interfaces",
    templateAttribute: "template-id",
    interfaceDataField: "interfaceData",
    modelDataField: "modelData",
    styleAttribute: "nidget-style"
};
},{}],2:[function(require,module,exports){
'use strict';
const NidgetElement = require("./NidgetElement");

/* global Utility */
class FileOperations {
    /**
     * Create a new dom element from a file (url).  Map variables (${...}) to 
     * a value.
     * @param {type} url
     * @param {type} map
     * @returns {node|FileOperations.loadDOMElement.domElement}
     */
    static async loadNidget(url, map){        
        let element = await FileOperations.loadDOMElement(url, map);
        return new NidgetElement(element);
    }    
    
    /**
     * Create a new dom element from a file (url).  Map variables (${...}) to 
     * a value.
     * @param {type} url
     * @param {type} map
     * @returns {node|FileOperations.loadDOMElement.domElement}
     */
    static async loadDOMElement(url, map = new Map()){        
        if (map instanceof Map === false) map = FileOperations.objectToMap(map);       
        let text = await FileOperations.getURL(url);
        return FileOperations.stringToDOMElement(text, map);
    }

    /**
     * Create a new dom element from text.
     * @param {type} text
     * @param {type} map
     * @returns {node|FileOperations.loadDOMElement.domElement}
     */
    static stringToDOMElement(text, map = new Map()){
        /* replace variables with values */
        for (let key of map.keys()){                  
            let value = map.get(key);
            let regex = new RegExp(`[$][{]?${key}[}]`, `g`);
            text = text.replace(regex, value);    
        }

        /* replace unfilled variables with empty */
        let regex = new RegExp(`[$][{][^}]*[}]`, `g`);
        text = text.replace(regex, ""); 

        let element = document.createElement('div');
        element.innerHTML = text;
        let domElement = null;
        console.log(element);

        return element;
    }

    static objectToMap(object){
        let map = new Map();
        for (let field in object){            
            if (typeof object[field] === "string" || typeof object[field] === "number"){
                map.set(field, object[field]);
            }
        }
        return map;
    }

    

    /*
     * Transfer contents of 'filename' from server to client.
     * @param {String} filename
     * @param {Function} successCallback
     * @param {Function} errorCallback
     * @returns {String} contents of file
     */
    static getURL(url) {
        let callback = function (resolve, reject) {
            var xhttp = new XMLHttpRequest();

            xhttp.onreadystatechange = function () {
                if (xhttp.readyState === 4) {
                    if (xhttp.status === 200) {
                        resolve(xhttp.responseText);
                    } else {
                        reject({
                            xhttp : xhttp,
                            status : xhttp.status, 
                            text : xhttp.responseText,
                            url : url
                        });
                    }
                }
            };
            
            xhttp.open("GET", url, true);
            xhttp.send(null);
        };

        return new Promise(callback);
    }

    /**
     * Create a new dom element from text.
     * @param {type} text
     * @param {type} map
     * @returns {node|FileOperations.loadDOMElement.domElement}
     */
    static async getFile(url, map = new Map()){
        let text = await FileOperations.getURL(url);

        /* replace variables with values */
        for (let key of map.keys()){
            let value = map.get(key);
            let regex = new RegExp(`[$][{]?${key}[}]`, `g`);
            text = text.replace(regex, value);
        }

        /* replace unfilled variables with empty */
        let regex = new RegExp(`[$][{][^}]*[}]`, `g`);
        text = text.replace(regex, "");

        return text;
    }

    /*
     * Transfer contents of 'filename' from server to client using current window location.
     * @param {String} filename
     * @param {Function} successCallback
     * @param {Function} errorCallback
     * @returns {undefined}
     */
    static getLocal(filename) {
        let callback = function (resolve, reject) {
            var xhttp = new XMLHttpRequest();
            var data = {};
            var url = window.location.href + "/" + filename;

            xhttp.onreadystatechange = function () {
                if (xhttp.readyState === 4) {
                    if (xhttp.status === 200) {
                        resolve(xhttp.responseText);
                    } else {
                        reject(xhttp.status, xhttp.responseText);
                    }
                }
            };

            xhttp.open("GET", url, true);
            xhttp.send(JSON.stringify(data));
        };

        return new Promise(callback);
    }
    
    /**
     * Cause 'text' to be saved as 'filename' client side.
     * @param {type} filename The default filename to save the text as.
     * @param {type} text The text to save to filename.
     * @returns {undefined}
     */
    static saveToFile(text, filename) {
        let anchor = document.createElement('a');
        let data = "text;charset=utf-8," + encodeURIComponent(text);
        anchor.setAttribute("href", "data:" + data);
        anchor.setAttribute("download", filename);
        anchor.click();
    }
}

FileOperations.NodeType = {
    ELEMENT : 1,
    ATTRIBUTE : 2,
    TEXT : 3, 
    CDATASECTION : 4,
    ENTITYREFERNCE : 5,
    ENTITY : 6,
    PROCESSINGINSTRUCTION : 7,
    COMMENT : 8,
    DOCUMENT : 9,
    DOCUMENTTYPE : 10,
    DOCUMENTFRAGMENT : 11,
    NOTATION : 12
};

module.exports = FileOperations;
},{"./NidgetElement":3}],3:[function(require,module,exports){
"use strict";
const FileOperations = require("./FileOperations");
const Nidget = require("./Constants");

/**
 * Calling methods on the nidget will treat shadow contents as regular contents.
 */
class NidgetElement extends HTMLElement {
    /**
     * Create a new Nidget associated with 'element'.  An error will be thrown
     * if the 'element' is already associated with a Nidget.
     * 
     * Disabled class indicates this nidget will ignore mouse events.
     * 
     * @param {type} element JQuery selector
     * @return {nm$_Nidget.NidgetElement}
     */
    constructor(templateId) {
        super();
        this.observers = {};

        if (templateId){
            this.applyTemplate(templateId);
        }
    }
    /**
        connectedCallback is invoked each time the custom element is appended into a document-connected element
     */
    async connectedCallback() {
        this.shadowContents = this;

        if (this.hasAttribute(Nidget.templateAttribute)){
            await this.applyTemplate(this.getAttribute(Nidget.templateAttribute));
        }

        this.detectDOM();
        this.ready();
    }

    detectDOM(){
        this.DOM = {};
        for (const element of this.querySelectorAll("[id]")){
            this.DOM[toCamelCase(element.id)] = element;
        }
    }

    /**
     * Retrieve a map of all data attributes
     * @returns {Map<any, any>}
     */
    dataAttributes() {
        let map = new Map();
        for (let attr of this.attributes) {
            if (attr.name.startsWith("data-")) {
                let name = attr.name.substr(5);
                map[name] = attr.value;
            }
        }
        return map;
    }

    /**
     * Attach a shadow element with the contents of the template named (templateID).
     * @return {undefined}
     */
    async applyTemplate(templateId) {
        if (this.shadowRoot !== null) return;
        let template = document.getElementById(templateId);

        if (!template){
            throw new Error(
                "Template '" + templateId + "' not found\n" +
                "Has the .ejs directive been added to the source file?\n" +
                "<%- include('../partials/nidget-templates'); %>"
            );
        }
        if (template.tagName.toUpperCase() !== "TEMPLATE") throw new Error("Element with id '" + templateId + "' is not a template.");

        this.attachShadow({mode: 'open'}).appendChild(template.content.cloneNode(true));
    }

    async ready(){}

    /**
     * Load contents of file into this element.
     * Replace all ${} variables with contents of 'map'.
     */
    async retrieveSource(map){
        let src = this.getAttribute(Nidget.srcAttribute);
        let text = await FileOperations.getFile(src, map);
        this.innerHTML = text;
    }

    static async loadTemplateSnippet(filename, tagname){
        let id = filename.replace(/[\// .-]+/g, "_");

        if (!document.querySelector(`#${id}`)){
            let text = await FileOperations.getFile(filename);
            let template = document.createElement("template");
            template.innerHTML = text;
            template.setAttribute("id", id);
            if (tagname) template.setAttribute("data-nidget", tagname);
            document.body.append(template);
        }

        let template = document.querySelector(`#${id}`);

        for (let ele of document.querySelectorAll(tagname)){
            await ele.injectTemplate(template);
        }
    }

    /**
     * Remove 'hidden' class.
     */
    show() {
        this.classList.remove("hidden");
        this.classList.add("shown");
    }

    /**
     * Add 'hidden' class.
     */
    hide() {
        this.classList.remove("shown");
        this.classList.add("hidden");
    }

    /**
     * Set the disabled flag that is read by nidget mouse functions.
     * @param value
     */
    set disabled(value){
        this.setAttribute(NidgetElement.DISABLED_ATTRIBUTE, value);
    }

    /**
     * Get the disabled flag that is read by nidget mouse functions.
     * @param value
     */
    get disabled(){
        if (!this.hasAttribute(NidgetElement.DISABLED_ATTRIBUTE)) return false;
        return this.getAttribute(NidgetElement.DISABLED_ATTRIBUTE);
    }

    /**
     * Return true if this element was under the mouse for the event.
     * @param {type} event
     * @param {type} element
     * @return {Boolean}
     */
    isUnderMouse(event) {
        let x = event.clientX;
        let y = event.clientY;
        let current = document.elementFromPoint(x, y);

        while (current) {
            if (current === this) return true;
            current = current.parentElement;
        }
        return false;
    }

    /**
     * Perform a query selection on the element, not the shadow root.
     */
    outerSelector(selectors){
        return super.querySelector(selectors);
    }

    /**
     * Perform a query select all on the element, not the shadow root.
     */
    outerSelectorAll(selectors){
        return super.querySelectorAll(selectors);
    }

    /**
     * Run the query selector on this element.
     * If this element has a shadow, run it on that instead.
     * @param selectors
     * @returns {HTMLElementTagNameMap[K]}
     */
   querySelector(selectors) {
        if (this.shadowRoot){
            return this.shadowRoot.querySelector(selectors);
        } else {
            return super.querySelector(selectors);
        }
    }

    /**
     * Run the query selector on this element.
     * If this element has a shadow, run it on that instead.
     * @param selectors
     * @returns {HTMLElementTagNameMap[K]}
     */
    querySelectorAll(selectors) {
        if (this.shadowRoot){
            return this.shadowRoot.querySelectorAll(selectors);
        } else {
            return super.querySelectorAll(selectors);
        }
    }

    /**
     * Remove this element from it's parent.
     */
    detach(){
        this.parentNode.removeChild(this);
    }

    /**
     * Index within the parent element.
     */
    index(){
        return Array.from(this.parentElement.children).indexOf(this);
    }
}

function toCamelCase(input){
    const split = input.split("-");
    for (let i = 1; i < split.length; i++) {
        split[i] = split[i].charAt(0).toUpperCase() + split[i].slice(1);
    }
    return split.join('');
}

NidgetElement.DISABLED_ATTRIBUTE = "nidget-disabled";
if (!window.customElements.get('nidget-element')) {
    window.customElements.define('nidget-element', NidgetElement);
}

module.exports = NidgetElement;
},{"./Constants":1,"./FileOperations":2}],4:[function(require,module,exports){
(function (setImmediate){(function (){
"use strict";
const NidgetElement = require("../NidgetElement");

/**
 * Set the font-size as a multiple of the css variable --fit-text-unit.
 * Style example: calc(45 * var(--fit-text-unit))
 */
class FitText {
    constructor(nidget){
        this.nidget = nidget;
        this.parseArguments();
        this.coefficient = this.extractUnits();
        this.lastCoefficient = 0;

        this.last = {
            hDiff: this.nidget.parentElement.offsetHeight - this.nidget.scrollHeight,
            wDiff: this.nidget.parentElement.offsetWidth - this.nidget.scrollWidth
        };
    }

    extractUnits(){
        const fontSize = this.nidget.style.fontSize;
        if (fontSize === "") return 1;
        if (!fontSize.endsWith(" * var(--fit-text-unit))")) return 1;
        if (!fontSize.startsWith("calc(")) return 1;
        const value = parseInt(fontSize.substr("calc(".length));
        if (!value || value < 1) return 1;
        return value;
    }

    notify(cb){
        this.direction = 0;
        setImmediate(()=>this.onResize(cb));
    }

    /**
     * Retrieve the settings from css
     */
    parseArguments(){
        let args = getComputedStyle(this.nidget).getPropertyValue("--nidget-fit-text");

        if (!args || args === false){
            this.hValue = 1;
            this.wValue = 1;
            return;
        }

        if (typeof(args) == "string"){
            if (args.search("height") !== -1) this.hValue = 1;
            if (args.search("width") !== -1) this.wValue = 1;
        }
    }

    /**
     * Fit the text element to it's parent element.
     * @param hValue true, fit the height
     * @param wValue true, fit the width
     */
    onResize(cb){
        delete this.timeout;
        cb = cb ?? function(){};

        if (this.nidget.textContent === "") return;
        if (this.nidget.parentElement.offsetHeight === 0) return;
        if (this.nidget.parentElement.offsetWidth === 0) return;
        if (this.nidget.style.display === "none") return;
        if (!this.hValue && !this.wValue) return;

        // hDiff growth direction due to height
        // wDiff growth direction due to width
        let hDiff = this.nidget.parentElement.offsetHeight - this.nidget.scrollHeight;
        let wDiff = this.nidget.parentElement.offsetWidth - this.nidget.scrollWidth;

        if (this.last.hDiff === hDiff && this.last.wDiff === wDiff) {
            cb(this.nidget.style.fontSize);
            return;
        }

        if (!this.hValue) hDiff = 0;
        if (!this.wValue) wDiff = 0;

        let dir = Math.sign(hDiff | wDiff); // will prefer to shrink
        const newCoefficient = this.coefficient + dir;

        const fontSize = `calc(${newCoefficient} * var(--fit-text-unit))`;
        if (newCoefficient !== this.coefficient && newCoefficient !== this.lastCoefficient) {
            this.nidget.style.opacity = 0.0;
            this.nidget.style.fontSize = fontSize;
            this.lastCoefficient = this.coefficient;
            this.coefficient = newCoefficient;
            this.timeout = setImmediate(()=>this.onResize(cb));
        } else {
            this.nidget.style.opacity = 1.0;
            this.lastCoefficient = 0;
            this.last = {hDiff: hDiff, wDiff: wDiff};
            cb(fontSize);
        }
    }
}

/**
 * A nidget element for displaying text.
 * put '--nidget-fit-text: 1.0;' into css for this element to enable scaling.
 * see: NidgetStyle.js
 */
class NidgetText extends NidgetElement {

    constructor() {
        super();
    }

    remove(){
        super.remove();
    }

    get fitText(){
        if (!this._fitText) this._fitText = new FitText(this);
        return this._fitText;
    }

    connectedCallback() {
        super.connectedCallback();
    }

    set text(value){
        this.innerText = value;
    }

    get text(){
        return this.innerText;
    }
}
;

if (!window.customElements.get('nidget-text')) {
    window.customElements.define('nidget-text', NidgetText);
}
module.exports = NidgetText;
}).call(this)}).call(this,require("timers").setImmediate)

},{"../NidgetElement":3,"timers":25}],5:[function(require,module,exports){
'use strict';
module.exports = {
    NidgetElement : require("./NidgetElement"),
    NidgetText : require("./nidget-components/NidgetText"),
    Constants: require("./Constants"),
};
},{"./Constants":1,"./NidgetElement":3,"./nidget-components/NidgetText":4}],6:[function(require,module,exports){
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

module.exports = _assertThisInitialized;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],7:[function(require,module,exports){
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],8:[function(require,module,exports){
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],9:[function(require,module,exports){
var setPrototypeOf = require("./setPrototypeOf.js");

var isNativeReflectConstruct = require("./isNativeReflectConstruct.js");

function _construct(Parent, args, Class) {
  if (isNativeReflectConstruct()) {
    module.exports = _construct = Reflect.construct;
    module.exports["default"] = module.exports, module.exports.__esModule = true;
  } else {
    module.exports = _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) setPrototypeOf(instance, Class.prototype);
      return instance;
    };

    module.exports["default"] = module.exports, module.exports.__esModule = true;
  }

  return _construct.apply(null, arguments);
}

module.exports = _construct;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{"./isNativeReflectConstruct.js":16,"./setPrototypeOf.js":18}],10:[function(require,module,exports){
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],11:[function(require,module,exports){
var superPropBase = require("./superPropBase.js");

function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    module.exports = _get = Reflect.get;
    module.exports["default"] = module.exports, module.exports.__esModule = true;
  } else {
    module.exports = _get = function _get(target, property, receiver) {
      var base = superPropBase(target, property);
      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(receiver);
      }

      return desc.value;
    };

    module.exports["default"] = module.exports, module.exports.__esModule = true;
  }

  return _get(target, property, receiver || target);
}

module.exports = _get;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{"./superPropBase.js":19}],12:[function(require,module,exports){
function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  module.exports["default"] = module.exports, module.exports.__esModule = true;
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],13:[function(require,module,exports){
var setPrototypeOf = require("./setPrototypeOf.js");

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

module.exports = _inherits;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{"./setPrototypeOf.js":18}],14:[function(require,module,exports){
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],15:[function(require,module,exports){
function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

module.exports = _isNativeFunction;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],16:[function(require,module,exports){
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

module.exports = _isNativeReflectConstruct;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],17:[function(require,module,exports){
var _typeof = require("@babel/runtime/helpers/typeof")["default"];

var assertThisInitialized = require("./assertThisInitialized.js");

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return assertThisInitialized(self);
}

module.exports = _possibleConstructorReturn;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{"./assertThisInitialized.js":6,"@babel/runtime/helpers/typeof":20}],18:[function(require,module,exports){
function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  module.exports["default"] = module.exports, module.exports.__esModule = true;
  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],19:[function(require,module,exports){
var getPrototypeOf = require("./getPrototypeOf.js");

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

module.exports = _superPropBase;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{"./getPrototypeOf.js":12}],20:[function(require,module,exports){
function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };

    module.exports["default"] = module.exports, module.exports.__esModule = true;
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };

    module.exports["default"] = module.exports, module.exports.__esModule = true;
  }

  return _typeof(obj);
}

module.exports = _typeof;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],21:[function(require,module,exports){
var getPrototypeOf = require("./getPrototypeOf.js");

var setPrototypeOf = require("./setPrototypeOf.js");

var isNativeFunction = require("./isNativeFunction.js");

var construct = require("./construct.js");

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return construct(Class, arguments, getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return setPrototypeOf(Wrapper, Class);
  };

  module.exports["default"] = module.exports, module.exports.__esModule = true;
  return _wrapNativeSuper(Class);
}

module.exports = _wrapNativeSuper;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{"./construct.js":9,"./getPrototypeOf.js":12,"./isNativeFunction.js":15,"./setPrototypeOf.js":18}],22:[function(require,module,exports){
module.exports = require("regenerator-runtime");

},{"regenerator-runtime":24}],23:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],24:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  typeof module === "object" ? module.exports : {}
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}

},{}],25:[function(require,module,exports){
(function (setImmediate,clearImmediate){(function (){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this)}).call(this,require("timers").setImmediate,require("timers").clearImmediate)

},{"process/browser.js":23,"timers":25}],26:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var AbstractView = /*#__PURE__*/function (_EventTarget) {
  (0, _inherits2["default"])(AbstractView, _EventTarget);

  var _super = _createSuper(AbstractView);

  function AbstractView() {
    var _this;

    (0, _classCallCheck2["default"])(this, AbstractView);
    _this = _super.call(this);
    _this.DOM = {};
    _this.DOM.gameBoard = document.querySelector("game-board");
    _this.DOM.questionPane = document.querySelector("#question-pane");
    _this.DOM.multipleChoice = document.querySelector("#multiple-choice-present");
    _this.DOM.playing_indicator = document.querySelector("#playing");
    _this.DOM.timer = document.querySelector("trivia-timer");
    _this.DOM.menuIndicator = document.querySelector("#menu-indicator");
    _this.DOM.menuArea = document.querySelector("#menu-area");
    _this.DOM.menuLogout = document.querySelector("#menu-logout");
    _this.DOM.playerContainer = document.querySelector("#player-container-left");
    return _this;
  }

  (0, _createClass2["default"])(AbstractView, [{
    key: "startTimer",
    value: function startTimer(update) {
      this.DOM.timer.show(update.time);
    }
  }, {
    key: "updateTimer",
    value: function updateTimer(update) {
      if (this.lastUpdate.model.players.length <= 0) return;
      this.DOM.timer.show();
      this.DOM.timer.set(update.time);

      if (this.lastUpdate.state === 6 || this.lastUpdate.state === 8) {
        var currentName = this.lastUpdate.model.players[0].name;
        var currentPanel = this.DOM.playerContainer.topPlayer();
        currentPanel.setTimer(update.progress);
      }
    }
  }, {
    key: "updateModel",
    value: function updateModel(update) {
      this.fillPlayers(update);
      this.lastUpdate = update;
      this.DOM.multipleChoice.hide();

      switch (update.state) {
        case 0:
          break;

        case 1:
          this.DOM.multipleChoice.hide();
          this.DOM.gameBoard.hide();
          this.DOM.questionPane.show();
          this.DOM.questionPane.setText(update.model.round.question);
          this.DOM.timer.hide();
          break;

        case 2:
          this.DOM.questionPane.hide();
          this.DOM.multipleChoice.show();
          this.DOM.multipleChoice.setMode("show");
          this.DOM.multipleChoice.querySelector(".inner.total").hide();
          this.DOM.multipleChoice.querySelector(".inner.bonus > .amount").text = update.model.round.bonus;

          for (var i = 0; i < 6; i++) {
            this.DOM.multipleChoice.querySelector("[data-index=\"".concat(i, "\"] check-box")).checked = false;
            this.DOM.multipleChoice.setAnswerText(i, update.model.round.answers[i]);
            this.DOM.multipleChoice.querySelector("[data-index=\"".concat(i, "\"] check-box")).locked = false;
          }

          break;

        case 3:
          this.DOM.questionPane.hide();
          this.DOM.multipleChoice.show();
          this.DOM.multipleChoice.setMode("show");

          for (var _i = 0; _i < 6; _i++) {
            this.DOM.multipleChoice.setAnswerText(_i, update.model.round.answers[_i]);
            this.DOM.multipleChoice.querySelector("[data-index=\"".concat(_i, "\"] check-box")).checked = update.model.round.values[_i];
            this.DOM.multipleChoice.querySelector("[data-index=\"".concat(_i, "\"] check-box")).locked = true;
          }

          break;

        case 4:
          this.DOM.gameBoard.show();
          this.fillJeopardyCategories(update);
          this.fillJeopardyCells(update);
          this.DOM.timer.hide();
          break;

        case 5:
          this.DOM.gameBoard.hide();
          this.DOM.questionPane.show();
          this.DOM.questionPane.setText(update.model.round.question);
          this.DOM.timer.hide();
          break;

        case 6:
          this.DOM.gameBoard.hide();
          this.DOM.questionPane.show();
          this.DOM.questionPane.setText(update.model.round.question);
          this.DOM.playerContainer.moveToTop(update.model.round.current_player);
          break;

        case 7:
          this.DOM.gameBoard.hide();
          this.DOM.questionPane.show();
          this.DOM.questionPane.setText(update.model.round.question);
          break;

        case 8:
          this.DOM.gameBoard.hide();
          this.DOM.questionPane.show();
          this.DOM.questionPane.setText(update.model.round.question);
          this.DOM.playerContainer.moveToTop(update.model.round.current_player);
          break;

        case 9:
          this.DOM.gameBoard.hide();
          this.DOM.questionPane.show();
          this.DOM.questionPane.setText(update.model.round.answer);
          this.DOM.timer.hide();
          break;

        case 10:
          this.DOM.gameBoard.hide();
          this.DOM.questionPane.show();
          this.DOM.questionPane.setText("GAME OVER");
          this.DOM.timer.hide();
          break;

        default:
          break;
      }
    }
  }, {
    key: "fillPlayers",
    value: function fillPlayers(update) {
      this.DOM.playerContainer.clear();
      if (update.model.players.length <= 0) return;

      var _iterator = _createForOfIteratorHelper(update.model.players),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var player = _step.value;
          this.DOM.playerContainer.addPlayer(player.name, player.score);

          if (update.model.round && update.model.round.style === 'j') {
            // TODO remove magic string
            if (update.model.round.current_player === player.name) {
              this.DOM.playerContainer.getPlayer(player.name).highlight = true;
              this.DOM.playerContainer.getPlayer(player.name).active = true;
            } else if (update.model.round.spentPlayers.indexOf(player.name) !== -1) {
              this.DOM.playerContainer.getPlayer(player.name).dim = true;
              window.x = this.DOM.playerContainer.getPlayer(player.name);
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "fillJeopardyCategories",
    value: function fillJeopardyCategories(update) {
      for (var i = 0; i < 6; i++) {
        var category = update.model.round.categories[i];
        this.DOM.gameBoard.setHeader(i, category["text"], category["font-size"], true);
      }
    }
  }, {
    key: "fillJeopardyCells",
    value: function fillJeopardyCells(update) {
      var round = update.model.round;

      for (var c = 0; c < 6; c++) {
        for (var r = 0; r < 5; r++) {
          if (round.spent[c][r]) {
            this.DOM.gameBoard.setCell(r, c, "");
          } else {
            this.DOM.gameBoard.setCell(r, c, round.values[c][r]);
          }
        }
      }
    }
  }]);
  return AbstractView;
}( /*#__PURE__*/(0, _wrapNativeSuper2["default"])(EventTarget));

module.exports = AbstractView;

},{"@babel/runtime/helpers/classCallCheck":8,"@babel/runtime/helpers/createClass":10,"@babel/runtime/helpers/getPrototypeOf":12,"@babel/runtime/helpers/inherits":13,"@babel/runtime/helpers/interopRequireDefault":14,"@babel/runtime/helpers/possibleConstructorReturn":17,"@babel/runtime/helpers/wrapNativeSuper":21}],27:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _AbstractView2 = _interopRequireDefault(require("./AbstractView.js"));

var _ViewEvent = _interopRequireDefault(require("./ViewEvent.js"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

/**
 * HostPortalView has methods to control the visibility/details of DOM objects.
 * This class will fire "click" events when buttons are clicked, with the data
 * in the format that will get sent to the server.  The HostPortalController
 * takes care of the communication details.
 *
 * The cell-select event is caught and re-dispatched.
 */
var HostPortalView = /*#__PURE__*/function (_AbstractView) {
  (0, _inherits2["default"])(HostPortalView, _AbstractView);

  var _super = _createSuper(HostPortalView);

  function HostPortalView() {
    var _this;

    (0, _classCallCheck2["default"])(this, HostPortalView);
    _this = _super.call(this);
    _this.DOM.acceptButton = document.querySelector("#accept");
    _this.DOM.rejectButton = document.querySelector("#reject");
    _this.DOM.backButton = document.querySelector("#back");
    _this.DOM.continueButton = document.querySelector("#continue");
    _this.DOM.nextButton = document.querySelector("#next");
    _this.DOM.startButton = document.querySelector("#start");
    _this.DOM.answer = document.querySelector("#answer");

    _this.DOM.acceptButton.addEventListener("click", function (e) {
      return _this.dispatchEvent(new _ViewEvent["default"]("accept"));
    });

    _this.DOM.rejectButton.addEventListener("click", function (e) {
      return _this.dispatchEvent(new _ViewEvent["default"]("reject"));
    });

    _this.DOM.backButton.addEventListener("click", function (e) {
      return _this.dispatchEvent(new _ViewEvent["default"]("back"));
    });

    _this.DOM.continueButton.addEventListener("click", function (e) {
      return _this.dispatchEvent(new _ViewEvent["default"]("continue"));
    });

    _this.DOM.nextButton.addEventListener("click", function (e) {
      return _this.dispatchEvent(new _ViewEvent["default"]("next"));
    });

    _this.DOM.startButton.addEventListener("click", function (e) {
      return _this.dispatchEvent(new _ViewEvent["default"]("start"));
    });

    _this.DOM.gameBoard.addEventListener("cell-select", function (e) {
      return _this.dispatchEvent(new _ViewEvent["default"]("select", e.detail));
    });

    return _this;
  }

  (0, _createClass2["default"])(HostPortalView, [{
    key: "updateModel",
    value: function updateModel(update) {
      (0, _get2["default"])((0, _getPrototypeOf2["default"])(HostPortalView.prototype), "updateModel", this).call(this, update);
      this.DOM.acceptButton.hide();
      this.DOM.rejectButton.hide();
      this.DOM.backButton.hide();
      this.DOM.continueButton.hide();
      this.DOM.nextButton.hide();
      this.DOM.startButton.hide();
      this.DOM.answer.hide();
      this.DOM.continueButton.classList.remove("center");
      this.DOM.continueButton.classList.add("right");

      switch (update.state) {
        case 0:
          this.DOM.startButton.show();
          break;

        case 1:
          this.DOM.continueButton.show();
          this.DOM.continueButton.classList.add("center");
          this.DOM.continueButton.classList.remove("right");
          break;

        case 2:
          this.DOM.continueButton.show(); // todo remove

          break;

        case 3:
          this.DOM.continueButton.show();
          this.DOM.continueButton.classList.add("center");
          this.DOM.continueButton.classList.remove("right");
          break;

        case 4:
          break;

        case 5:
          this.DOM.backButton.show();
          this.DOM.continueButton.show();
          this.DOM.continueButton.classList.add("right");
          this.DOM.continueButton.classList.remove("center");
          this.DOM.answer.show();
          break;

        case 6:
          this.DOM.acceptButton.show();
          this.DOM.rejectButton.show();
          this.DOM.timer.show();
          this.DOM.answer.show();
          break;

        case 7:
          break;

        case 8:
          this.DOM.acceptButton.show();
          this.DOM.rejectButton.show();
          this.DOM.answer.show();
          break;

        case 9:
          this.DOM.continueButton.show();
          this.DOM.continueButton.classList.remove("right");
          this.DOM.continueButton.classList.add("center");
          break;

        default:
          break;
      }
    }
  }, {
    key: "updateAnswer",
    value: function updateAnswer(answer) {
      this.DOM.answer.text = answer;
    }
  }]);
  return HostPortalView;
}(_AbstractView2["default"]);

var _default = HostPortalView;
exports["default"] = _default;

},{"./AbstractView.js":26,"./ViewEvent.js":29,"@babel/runtime/helpers/classCallCheck":8,"@babel/runtime/helpers/createClass":10,"@babel/runtime/helpers/get":11,"@babel/runtime/helpers/getPrototypeOf":12,"@babel/runtime/helpers/inherits":13,"@babel/runtime/helpers/interopRequireDefault":14,"@babel/runtime/helpers/possibleConstructorReturn":17}],28:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var PortalController = /*#__PURE__*/function () {
  function PortalController(ws, view) {
    var _this = this;

    (0, _classCallCheck2["default"])(this, PortalController);
    this.ws = ws;
    this.view = view;
    this.name = "";
    this.ws.addEventListener('message', function (event) {
      return _this.process(JSON.parse(event.data));
    });
    this.ws.addEventListener('close', function (event) {
      return _this.onClose(event);
    });
    this.view.addEventListener('click', function (event) {
      return _this.send(event.detail);
    });
    this.view.addEventListener('cell-select', function (event) {
      return _this.send(event.detail);
    });
  }
  /**
   * Incoming messages get processed here.
   * @param message
   */


  (0, _createClass2["default"])(PortalController, [{
    key: "process",
    value: function process(message) {
      if (message.action !== "ping" && message.action !== "update_timer") {
        console.log(message);
        window.lastMessage = message;
      }

      switch (message.action) {
        case "connection_established":
          this.name = message.data.name;
          if (this.view.setName) this.view.setName(message.data.name);
          break;

        case "provide_answer":
          this.view.updateAnswer(message.data.answer);
          break;

        case "update_model":
          this.view.updateModel(message.data);
          break;

        case "start_timer":
          this.view.startTimer(message.data);
          break;

        case "update_timer":
          this.view.updateTimer(message.data);
          break;

        case "stop_timer":
          break;
      }
    }
  }, {
    key: "onClose",
    value: function onClose(event) {
      if (this.name === "@HOST") {
        window.location = "host.ejs";
      } else {
        window.location = "contestant_join.ejs";
      }
    }
  }, {
    key: "send",
    value: function send(msg) {
      console.log("send: ".concat(JSON.stringify(msg)));
      this.ws.send(JSON.stringify(msg));
    }
  }]);
  return PortalController;
}();

var _default = PortalController;
exports["default"] = _default;

},{"@babel/runtime/helpers/classCallCheck":8,"@babel/runtime/helpers/createClass":10,"@babel/runtime/helpers/interopRequireDefault":14}],29:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var ViewEvent = /*#__PURE__*/function (_CustomEvent) {
  (0, _inherits2["default"])(ViewEvent, _CustomEvent);

  var _super = _createSuper(ViewEvent);

  function ViewEvent(action) {
    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    (0, _classCallCheck2["default"])(this, ViewEvent);
    return _super.call(this, 'click', {
      detail: {
        action: action,
        data: data
      }
    });
  }

  return ViewEvent;
}( /*#__PURE__*/(0, _wrapNativeSuper2["default"])(CustomEvent));

var _default = ViewEvent;
exports["default"] = _default;

},{"@babel/runtime/helpers/classCallCheck":8,"@babel/runtime/helpers/getPrototypeOf":12,"@babel/runtime/helpers/inherits":13,"@babel/runtime/helpers/interopRequireDefault":14,"@babel/runtime/helpers/possibleConstructorReturn":17,"@babel/runtime/helpers/wrapNativeSuper":21}],30:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function connectWebsocket() {
  var url = window.origin;

  if (url.startsWith("http:")) {
    url = "ws" + url.substr(4) + "/game-service.ws";
  } else {
    url = "wss" + url.substr(5) + "/game-service.ws";
  }

  return new Promise(function (resolve, reject) {
    var socket = new WebSocket(url);
    socket.addEventListener('error', function (event) {
      return reject(event);
    });
    socket.addEventListener('open', function (event) {
      return resolve(socket);
    });
  });
}

var _default = connectWebsocket;
exports["default"] = _default;

},{}],31:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _FileOps = _interopRequireDefault(require("./modules/FileOps.js"));

var _Authenticate = _interopRequireDefault(require("./modules/Authenticate.js"));

var _HostPortalView = _interopRequireDefault(require("./HostPortalView.js"));

var _PortalController = _interopRequireDefault(require("./PortalController"));

var _connectWebsocket = _interopRequireDefault(require("./connectWebsocket.js"));

var _GameManagerService = _interopRequireDefault(require("./services/GameManagerService"));

var _constants = _interopRequireDefault(require("../server/constants.js"));

var _SetupSizeListener = _interopRequireDefault(require("./modules/SetupSizeListener"));

// noinspection SpellCheckingInspection
var gameManagerService = new _GameManagerService["default"]();
var fileOps = new _FileOps["default"]();
var model = null;
var questionPane = null;
var editorPane = null;
window.onload = /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
  var start, hostView, ws, end, time;
  return _regenerator["default"].wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          start = new Date();
          hostView = new _HostPortalView["default"]();
          (0, _SetupSizeListener["default"])();
          _context.prev = 3;
          _context.next = 6;
          return new _Authenticate["default"]().loadClient();

        case 6:
          _context.next = 8;
          return fileOps.loadClient();

        case 8:
          _context.next = 10;
          return sendTokenToServer();

        case 10:
          _context.next = 12;
          return (0, _connectWebsocket["default"])();

        case 12:
          ws = _context.sent;
          new _PortalController["default"](ws, hostView);
          document.querySelector("menu-container").addEventListener("add-players", function () {
            ws.send(JSON.stringify({
              action: "join",
              data: {
                name: "Adam"
              }
            }));
            ws.send(JSON.stringify({
              action: "join",
              data: {
                name: "Bert"
              }
            }));
            ws.send(JSON.stringify({
              action: "join",
              data: {
                name: "Carol"
              }
            }));
            ws.send(JSON.stringify({
              action: "join",
              data: {
                name: "Dave"
              }
            }));
            ws.send(JSON.stringify({
              action: "join",
              data: {
                name: "Edith"
              }
            }));
            ws.send(JSON.stringify({
              action: "join",
              data: {
                name: "Fran"
              }
            }));
            ws.send(JSON.stringify({
              action: "join",
              data: {
                name: "Garth"
              }
            }));
            ws.send(JSON.stringify({
              action: "join",
              data: {
                name: "Herbert"
              }
            }));
            ws.send(JSON.stringify({
              action: "join",
              data: {
                name: "Ira"
              }
            }));
            ws.send(JSON.stringify({
              action: "join",
              data: {
                name: "Jill"
              }
            }));
            ws.send(JSON.stringify({
              action: "join",
              data: {
                name: "Keith"
              }
            }));
            ws.send(JSON.stringify({
              action: "join",
              data: {
                name: "Lisa"
              }
            }));
            ws.send(JSON.stringify({
              action: "join",
              data: {
                name: "Matt"
              }
            }));
          });
          document.querySelector("menu-container").addEventListener("next", function () {
            ws.send(JSON.stringify({
              action: "next_round"
            }));
          });
          document.querySelector("menu-container").addEventListener("prev", function () {
            ws.send(JSON.stringify({
              action: "prev_round"
            }));
          });
          document.querySelector("menu-container").addEventListener("terminate", function () {
            var token = gapi.auth2.getAuthInstance().currentUser.get().getAuthResponse().id_token;
            gameManagerService.terminate(token);
            window.location = _constants["default"].locations.HOST;
          });

          window.addPlayers = function () {
            ws.send(JSON.stringify({
              action: "join",
              data: {
                name: "Adam"
              }
            }));
            ws.send(JSON.stringify({
              action: "join",
              data: {
                name: "Bert"
              }
            }));
            ws.send(JSON.stringify({
              action: "join",
              data: {
                name: "Carol"
              }
            }));
            ws.send(JSON.stringify({
              action: "join",
              data: {
                name: "Dave"
              }
            }));
            ws.send(JSON.stringify({
              action: "join",
              data: {
                name: "Edith"
              }
            }));
            ws.send(JSON.stringify({
              action: "join",
              data: {
                name: "Fran"
              }
            }));
            ws.send(JSON.stringify({
              action: "join",
              data: {
                name: "Garth"
              }
            }));
            ws.send(JSON.stringify({
              action: "join",
              data: {
                name: "Herbert"
              }
            }));
          };

          _context.next = 24;
          break;

        case 21:
          _context.prev = 21;
          _context.t0 = _context["catch"](3);
          console.log(_context.t0);

        case 24:
          end = new Date();
          time = end - start;
          console.log("Load Time " + time + " ms");

        case 27:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, null, [[3, 21]]);
}));

function sendTokenToServer() {
  return new Promise(function (resolve, reject) {
    var token = gapi.auth2.getAuthInstance().currentUser.get().getAuthResponse().id_token;
    var xhttp = new XMLHttpRequest();
    xhttp.addEventListener("load", function (event) {
      var response = JSON.parse(xhttp.responseText);
      if (response.result === "success") resolve();else reject(new Error("token rejected"));
    });
    xhttp.open("POST", "connect-host");
    xhttp.setRequestHeader("Content-type", "application/json");
    xhttp.send(JSON.stringify({
      token: token
    }));
  });
}

},{"../server/constants.js":47,"./HostPortalView.js":27,"./PortalController":28,"./connectWebsocket.js":30,"./modules/Authenticate.js":32,"./modules/FileOps.js":33,"./modules/SetupSizeListener":34,"./services/GameManagerService":46,"@babel/runtime/helpers/asyncToGenerator":7,"@babel/runtime/helpers/interopRequireDefault":14,"@babel/runtime/regenerator":22}],32:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

// see https://developers.google.com/drive/api/v3/quickstart/js?hl=en
var Authenticate = /*#__PURE__*/function () {
  function Authenticate() {
    (0, _classCallCheck2["default"])(this, Authenticate);
    Object.assign(this, require("./googleFields.js"));
  }

  (0, _createClass2["default"])(Authenticate, [{
    key: "loadClient",
    value: function loadClient() {
      var _this = this;

      return new Promise(function (resolve, reject) {
        gapi.load('client:auth2', function () {
          return _this.__initClient(resolve, reject);
        });
      });
    }
  }, {
    key: "__initClient",
    value: function __initClient(resolve, reject) {
      gapi.client.init({
        apiKey: this.developerKey,
        clientId: this.clientId,
        discoveryDocs: this.discoveryDocs,
        scope: this.scope
      }).then(function (result) {
        resolve();
      }, function (error) {
        console.log("ERROR INIT");
        console.log(error);
        reject(error);
      });
    }
  }, {
    key: "isAuthorized",
    value: function isAuthorized() {
      var user = gapi.auth2.getAuthInstance().currentUser.get();
      return user.hasGrantedScopes(this.scope);
    }
  }, {
    key: "signIn",
    value: function signIn() {
      gapi.auth2.getAuthInstance().signIn();
    }
  }, {
    key: "signOut",
    value: function signOut() {
      gapi.auth2.getAuthInstance().signOut();
    }
  }]);
  return Authenticate;
}();

module.exports = Authenticate;

},{"./googleFields.js":35,"@babel/runtime/helpers/classCallCheck":8,"@babel/runtime/helpers/createClass":10,"@babel/runtime/helpers/interopRequireDefault":14}],33:[function(require,module,exports){
"use strict"; // see https://developers.google.com/drive/api/v3/quickstart/js?hl=en

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var FileOps = /*#__PURE__*/function () {
  function FileOps() {
    (0, _classCallCheck2["default"])(this, FileOps);
  }

  (0, _createClass2["default"])(FileOps, [{
    key: "load",
    value: function () {
      var _load = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.loadClient();

              case 2:
                _context.next = 4;
                return this.loadDrive();

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function load() {
        return _load.apply(this, arguments);
      }

      return load;
    }()
  }, {
    key: "loadClient",
    value: function loadClient() {
      return new Promise(function (resolve, reject) {
        gapi.load('client', function () {
          return resolve();
        });
      });
    }
  }, {
    key: "loadDrive",
    value: function loadDrive() {
      return new Promise(function (resolve, reject) {
        gapi.client.load('drive', 'v3', resolve());
      });
    }
  }, {
    key: "create",
    value: function () {
      var _create = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
        var filename,
            _args2 = arguments;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                filename = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : "Game Name.json";
                return _context2.abrupt("return", new Promise(function (resolve, reject) {
                  gapi.client.drive.files.create({
                    name: filename,
                    parents: ['appDataFolder'],
                    fields: "id"
                  }).then(function (res) {
                    resolve(res.result.id);
                  }, function (error) {
                    reject(error);
                  });
                }));

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function create() {
        return _create.apply(this, arguments);
      }

      return create;
    }()
  }, {
    key: "delete",
    value: function () {
      var _delete2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(fileId) {
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", new Promise(function (resolve, reject) {
                  gapi.client.drive.files["delete"]({
                    fileId: fileId
                  }).then(function (res) {
                    resolve(res.result);
                  }, function (error) {
                    reject(error);
                  });
                }));

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function _delete(_x) {
        return _delete2.apply(this, arguments);
      }

      return _delete;
    }()
  }, {
    key: "list",
    value: function () {
      var _list = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4() {
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                return _context4.abrupt("return", new Promise(function (resolve, reject) {
                  gapi.client.drive.files.list({
                    // q: `name contains '.json'`,
                    spaces: 'appDataFolder',
                    fields: 'files/name,files/id,files/modifiedTime'
                  }).then(function (res) {
                    resolve(res.result.files);
                  }, function (error) {
                    reject(error);
                  });
                }));

              case 1:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function list() {
        return _list.apply(this, arguments);
      }

      return list;
    }()
  }, {
    key: "get",
    value: function () {
      var _get = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(fileId) {
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                return _context5.abrupt("return", new Promise(function (resolve, reject) {
                  gapi.client.drive.files.get({
                    fileId: fileId,
                    alt: 'media'
                  }).then(function (res) {
                    resolve(res);
                  }, function (error) {
                    console.log(error);
                    reject(error.message);
                  });
                }));

              case 1:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      function get(_x2) {
        return _get.apply(this, arguments);
      }

      return get;
    }()
  }, {
    key: "setBody",
    value: function () {
      var _setBody = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6(fileId, body) {
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                return _context6.abrupt("return", new Promise(function (resolve, reject) {
                  gapi.client.request({
                    path: "upload/drive/v3/files/" + fileId,
                    method: "PATCH",
                    params: {
                      uploadType: "media"
                    },
                    headers: {
                      "Content-Type": "application/json"
                    },
                    body: body
                  }).then(function (res) {
                    resolve(JSON.parse(res.body));
                  }, function (error) {
                    console.log(error);
                    reject(error.message);
                  });
                }));

              case 1:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function setBody(_x3, _x4) {
        return _setBody.apply(this, arguments);
      }

      return setBody;
    }()
  }, {
    key: "rename",
    value: function () {
      var _rename = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7(fileId, filename) {
        return _regenerator["default"].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                return _context7.abrupt("return", new Promise(function (resolve, reject) {
                  gapi.client.drive.files.update({
                    fileId: fileId,
                    name: filename
                  }).then(function (res) {
                    resolve(JSON.parse(res.body));
                  }, function (error) {
                    console.log(error);
                    reject(error.message);
                  });
                }));

              case 1:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      function rename(_x5, _x6) {
        return _rename.apply(this, arguments);
      }

      return rename;
    }()
  }]);
  return FileOps;
}();

var _default = FileOps;
exports["default"] = _default;

},{"@babel/runtime/helpers/asyncToGenerator":7,"@babel/runtime/helpers/classCallCheck":8,"@babel/runtime/helpers/createClass":10,"@babel/runtime/helpers/interopRequireDefault":14,"@babel/runtime/regenerator":22}],34:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function setupSizeListener() {
  function reportWindowSize() {
    var pageContainer = document.querySelector("#page-container");
    var ratio = window.innerWidth / window.innerHeight;

    if (ratio >= 16 / 9) {
      pageContainer.classList.add("aspect-fit");
      pageContainer.classList.remove("shrink-horz");
    } else {
      pageContainer.classList.remove("aspect-fit");
      pageContainer.classList.add("shrink-horz");
    }
  }

  window.addEventListener("resize", function (e) {
    return reportWindowSize();
  });
  reportWindowSize();
}

var _default = setupSizeListener;
exports["default"] = _default;

},{}],35:[function(require,module,exports){
"use strict";

module.exports = {
  // The Browser API key obtained from the Google API Console.
  developerKey: 'AIzaSyABcdLmT6HH_7Go82q_IBGI3jm6UL4w4Q0',
  // The Client ID obtained from the Google API Console. Replace with your own Client ID.
  clientId: "158823134681-98bgkangoltk636ukf8pofeis7pa7jbk.apps.googleusercontent.com",
  // Replace with your own project number from console.developers.google.com.
  appId: "158823134681",
  // Array of API discovery doc URLs for APIs used by the quickstart
  discoveryDocs: ["https://www.googleapis.com/discovery/v1/apis/drive/v3/rest"],
  // Scope to use to access user's Drive items.
  scope: "https://www.googleapis.com/auth/drive.file"
};

},{}],36:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var NidgetElement = require("@thaerious/nidget").NidgetElement;

var ValueUpdate = /*#__PURE__*/function (_CustomEvent) {
  (0, _inherits2["default"])(ValueUpdate, _CustomEvent);

  var _super = _createSuper(ValueUpdate);

  function ValueUpdate(value) {
    (0, _classCallCheck2["default"])(this, ValueUpdate);
    return _super.call(this, 'value-update', {
      detail: {
        value: value
      }
    });
  }

  return ValueUpdate;
}( /*#__PURE__*/(0, _wrapNativeSuper2["default"])(CustomEvent));

var CheckBox = /*#__PURE__*/function (_NidgetElement) {
  (0, _inherits2["default"])(CheckBox, _NidgetElement);

  var _super2 = _createSuper(CheckBox);

  function CheckBox() {
    (0, _classCallCheck2["default"])(this, CheckBox);
    return _super2.apply(this, arguments);
  }

  (0, _createClass2["default"])(CheckBox, [{
    key: "connectedCallback",
    value: function () {
      var _connectedCallback = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        var _this = this;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _get2["default"])((0, _getPrototypeOf2["default"])(CheckBox.prototype), "connectedCallback", this).call(this);

              case 2:
                this.addEventListener("click", function () {
                  console.log((0, _typeof2["default"])(_this.locked));
                  if (_this.locked) return;

                  _this.toggle();
                });

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function connectedCallback() {
        return _connectedCallback.apply(this, arguments);
      }

      return connectedCallback;
    }()
  }, {
    key: "toggle",
    value: function toggle() {
      var dispatch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      if (this.checked === 'true') this.setChecked('false', dispatch);else this.setChecked('true', dispatch);
    }
  }, {
    key: "checked",
    get: function get() {
      if (!this.hasAttribute(CheckBox.CHECKED_ATTRIBUTE)) {
        this.setAttribute(CheckBox.CHECKED_ATTRIBUTE, 'false');
      }

      return this.getAttribute(CheckBox.CHECKED_ATTRIBUTE);
    },
    set: function set(value) {
      if (value === this.checked) return;
      this.setAttribute(CheckBox.CHECKED_ATTRIBUTE, value);
      this.dispatchEvent(new ValueUpdate(value));
    }
  }, {
    key: "setChecked",
    value: function setChecked(value) {
      var dispatch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      if (value === this.checked) return;
      this.setAttribute(CheckBox.CHECKED_ATTRIBUTE, value);
      if (dispatch) this.dispatchEvent(new ValueUpdate(value));
    }
    /**
     * Set the locked attribute.
     * If true prevents changing value.
     * @param value
     */

  }, {
    key: "locked",
    get:
    /**
     * Retrieve the locked attribute.
     */
    function get() {
      return this.getAttribute(CheckBox.LOCKED_ATTRIBUTE) === "true";
    },
    set: function set(value) {
      this.setAttribute(CheckBox.LOCKED_ATTRIBUTE, value);
    }
  }]);
  return CheckBox;
}(NidgetElement);

CheckBox.CHECKED_ATTRIBUTE = "checked";
CheckBox.LOCKED_ATTRIBUTE = "locked";
window.customElements.define('check-box', CheckBox);
module.exports = CheckBox;

},{"@babel/runtime/helpers/asyncToGenerator":7,"@babel/runtime/helpers/classCallCheck":8,"@babel/runtime/helpers/createClass":10,"@babel/runtime/helpers/get":11,"@babel/runtime/helpers/getPrototypeOf":12,"@babel/runtime/helpers/inherits":13,"@babel/runtime/helpers/interopRequireDefault":14,"@babel/runtime/helpers/possibleConstructorReturn":17,"@babel/runtime/helpers/typeof":20,"@babel/runtime/helpers/wrapNativeSuper":21,"@babel/runtime/regenerator":22,"@thaerious/nidget":5}],37:[function(require,module,exports){
"use strict";
/** View-Controller for the HTML game board element
    This is the classical "Jeopardy" type board
    This is model agnostic, see EditorPane.js for model methods
    generates the following events:
        cell-select (row, col): when a user clicks a cell
        header-update (value, col, fontsize) : when the header text changes (and blurs)
 **/

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var NidgetElement = require("@thaerious/nidget").NidgetElement;

var CellSelectEvent = /*#__PURE__*/function (_CustomEvent) {
  (0, _inherits2["default"])(CellSelectEvent, _CustomEvent);

  var _super = _createSuper(CellSelectEvent);

  function CellSelectEvent(row, col) {
    (0, _classCallCheck2["default"])(this, CellSelectEvent);
    return _super.call(this, 'cell-select', {
      detail: {
        row: row,
        col: col
      }
    });
  }

  return CellSelectEvent;
}( /*#__PURE__*/(0, _wrapNativeSuper2["default"])(CustomEvent));

var HeaderUpdateEvent = /*#__PURE__*/function (_CustomEvent2) {
  (0, _inherits2["default"])(HeaderUpdateEvent, _CustomEvent2);

  var _super2 = _createSuper(HeaderUpdateEvent);

  function HeaderUpdateEvent(col, value, fontSize) {
    (0, _classCallCheck2["default"])(this, HeaderUpdateEvent);
    return _super2.call(this, 'header-update', {
      detail: {
        value: value,
        col: col,
        fontSize: fontSize
      }
    });
  }

  return HeaderUpdateEvent;
}( /*#__PURE__*/(0, _wrapNativeSuper2["default"])(CustomEvent));

var GameBoard = /*#__PURE__*/function (_NidgetElement) {
  (0, _inherits2["default"])(GameBoard, _NidgetElement);

  var _super3 = _createSuper(GameBoard);

  function GameBoard() {
    (0, _classCallCheck2["default"])(this, GameBoard);
    return _super3.call(this, "game-board-template");
  }

  (0, _createClass2["default"])(GameBoard, [{
    key: "ready",
    value: function () {
      var _ready = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        var _this = this;

        var _iterator, _step, _loop2, _loop, col;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _get2["default"])((0, _getPrototypeOf2["default"])(GameBoard.prototype), "ready", this).call(this);

              case 2:
                _iterator = _createForOfIteratorHelper(this.querySelectorAll(".text-buffer"));

                try {
                  _loop2 = function _loop2() {
                    var element = _step.value;
                    var value = element.querySelector(".value");
                    element.addEventListener("click", function (e) {
                      if (value.innerHTML === "") value.innerHTML = " "; // makes the cursor show up when focused

                      value.focus();
                    });
                  };

                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    _loop2();
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }

                _loop = function _loop(col) {
                  _this.getHeader(col).addEventListener("input", function (event) {
                    event.target.fitText.notify();
                  });

                  _this.getHeader(col).addEventListener("blur", function (event) {
                    event.target.innerHTML = event.target.text.trim();
                    event.target.fitText.notify(function (fontSize) {
                      _this.dispatchEvent(new HeaderUpdateEvent(col, _this.getHeader(col).text, fontSize));
                    });
                  });

                  var _loop3 = function _loop3(row) {
                    _this.getCell(row, col).addEventListener("click", function () {
                      _this.dispatchEvent(new CellSelectEvent(row, col));
                    });
                  };

                  for (var row = 0; row < 5; row++) {
                    _loop3(row);
                  }
                };

                for (col = 0; col < 6; col++) {
                  _loop(col);
                }

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function ready() {
        return _ready.apply(this, arguments);
      }

      return ready;
    }()
    /**
     * Set the category text.
     * @param index The column to set
     * @param value The text to set it to.
     * @param fontSize
     * @param lock turn off content-editable, default false (on).
     */

  }, {
    key: "setHeader",
    value: function setHeader(index, value, fontSize) {
      var lock = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var element = this.getHeader(index);
      element.text = value;
      element.style.fontSize = fontSize;

      if (lock) {
        element.setAttribute("contentEditable", "false");
      }
    }
    /**
     * Retrieve the header html element
     * @param index
     * @param value
     */

  }, {
    key: "getHeader",
    value: function getHeader(index) {
      if (typeof index !== "number" || index < 0 || index > 6) throw new Error("Invalid index: " + index);
      var selector = "[data-row='h'][data-col='".concat(index, "'] .value");
      return this.querySelector(selector);
    }
    /**
     * Set the value of a non-category cell.
     * @param row
     * @param col
     * @param value
     */

  }, {
    key: "setCell",
    value: function setCell(row, col) {
      var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
      this.getCell(row, col).textContent = value;
    }
  }, {
    key: "getCell",
    value: function getCell(row, col) {
      var selector = "[data-row=\"".concat(row, "\"][data-col=\"").concat(col, "\"] .value");
      return this.querySelector(selector);
    }
  }, {
    key: "setComplete",
    value: function setComplete(row, col, value) {
      if (typeof row !== "number" || row < 0 || row > 6) throw new Error("Invalid row: " + row);
      if (typeof col !== "number" || col < 0 || col > 5) throw new Error("Invalid col: " + col);
      this.getCell(row, col).setAttribute("data-complete", value);
    }
  }]);
  return GameBoard;
}(NidgetElement);

window.customElements.define('game-board', GameBoard);
module.exports = GameBoard;

},{"@babel/runtime/helpers/asyncToGenerator":7,"@babel/runtime/helpers/classCallCheck":8,"@babel/runtime/helpers/createClass":10,"@babel/runtime/helpers/get":11,"@babel/runtime/helpers/getPrototypeOf":12,"@babel/runtime/helpers/inherits":13,"@babel/runtime/helpers/interopRequireDefault":14,"@babel/runtime/helpers/possibleConstructorReturn":17,"@babel/runtime/helpers/wrapNativeSuper":21,"@babel/runtime/regenerator":22,"@thaerious/nidget":5}],38:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var NidgetElement = require("@thaerious/nidget").NidgetElement;

var MenuContainer = /*#__PURE__*/function (_NidgetElement) {
  (0, _inherits2["default"])(MenuContainer, _NidgetElement);

  var _super = _createSuper(MenuContainer);

  function MenuContainer(props) {
    (0, _classCallCheck2["default"])(this, MenuContainer);
    return _super.call(this, "menu-container-template");
  }

  (0, _createClass2["default"])(MenuContainer, [{
    key: "ready",
    value: function () {
      var _ready = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        var _this = this;

        var _iterator, _step, _loop;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _get2["default"])((0, _getPrototypeOf2["default"])(MenuContainer.prototype), "ready", this).call(this);

              case 2:
                this.querySelector("#menu-icon").setAttribute("src", this.getAttribute("image-src"));
                _iterator = _createForOfIteratorHelper(this.outerSelectorAll("menu-item"));

                try {
                  _loop = function _loop() {
                    var item = _step.value;
                    item.detach();

                    _this.menuArea.append(item);

                    item.addEventListener("click", function (event) {
                      _this.dispatchEvent(new CustomEvent(item.getAttribute("event-name"), {
                        bubbles: true,
                        composed: true
                      }));
                    });
                  };

                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    _loop();
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }

                this.positionMenu();
                this.menuButton.addEventListener("click", function () {
                  return _this.toggleMenu();
                });
                this.menuArea.addEventListener("mouseleave", function () {
                  return _this.mouseLeave();
                });
                this.menuButton.addEventListener("mouseleave", function () {
                  return _this.mouseLeave();
                });
                this.menuArea.addEventListener("mouseenter", function () {
                  return _this.mouseEnter();
                });
                this.menuButton.addEventListener("mouseenter", function () {
                  return _this.mouseEnter();
                });

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function ready() {
        return _ready.apply(this, arguments);
      }

      return ready;
    }()
  }, {
    key: "init",
    value: function init(menuSelector) {
      var _this2 = this;

      document.querySelectorAll("[data-autoclose='true']").forEach(function (ele) {
        ele.addEventListener("click", function () {
          return _this2.close();
        });
      });
      document.querySelectorAll(".sub-menu").forEach(function (ele) {
        ele.querySelector(".menu-label").addEventListener("click", function () {
          _this2.toggleMenu(ele);
        });
      });
      return this;
    }
  }, {
    key: "close",
    value: function close() {
      this.menuArea.classList.add("hidden");
      document.querySelectorAll(".sub-menu > .menu-area").forEach(function (ele) {
        ele.classList.add("hidden");
      });
    }
  }, {
    key: "open",
    value: function open() {
      this.menuArea.classList.remove("hidden");
      this.positionMenu();
    }
  }, {
    key: "mouseLeave",
    value: function mouseLeave() {
      var _this3 = this;

      if (this.timeout) return;
      this.timeout = setTimeout(function () {
        _this3.close();

        _this3.timeout = null;
      }, 500);
    }
  }, {
    key: "mouseEnter",
    value: function mouseEnter() {
      if (!this.timeout) return;
      clearTimeout(this.timeout);
      this.timeout = null;
    }
  }, {
    key: "showMenu",
    value: function showMenu() {
      this.menuArea.classList.remove("hidden");
      this.positionMenu();
    }
  }, {
    key: "hideMenu",
    value: function hideMenu() {
      this.menuArea.classList.add("hidden");
    }
  }, {
    key: "isMenuHidden",
    value: function isMenuHidden() {
      return this.menuArea.classList.contains("hidden");
    }
  }, {
    key: "toggleMenu",
    value: function toggleMenu() {
      if (this.isMenuHidden()) this.showMenu();else this.hideMenu();
    }
  }, {
    key: "positionMenu",
    value: function positionMenu() {
      var left = this.menuButton.getBoundingClientRect().left;
      var bWidth = this.menuButton.getBoundingClientRect().width;
      var mWidth = this.menuArea.getBoundingClientRect().width;

      if (left + bWidth + mWidth + 2 > window.innerWidth) {
        this.setMenuLeft();
      } else {
        this.setMenuRight();
      }
    }
  }, {
    key: "setMenuLeft",
    value: function setMenuLeft() {
      var left = this.menuButton.offsetLeft;
      var width = this.menuArea.offsetWidth;
      this.menuArea.style.left = left - width - 2 + "px";
    }
  }, {
    key: "setMenuRight",
    value: function setMenuRight() {
      var left = this.menuButton.offsetLeft;
      var width = this.menuButton.offsetWidth;
      this.menuArea.style.left = left + width + 2 + "px";
    }
  }, {
    key: "menuButton",
    get: function get() {
      return this.querySelector("#menu-icon");
    }
  }, {
    key: "menuArea",
    get: function get() {
      return this.querySelector("#outer");
    }
  }]);
  return MenuContainer;
}(NidgetElement);

var MenuItem = /*#__PURE__*/function (_NidgetElement2) {
  (0, _inherits2["default"])(MenuItem, _NidgetElement2);

  var _super2 = _createSuper(MenuItem);

  function MenuItem() {
    (0, _classCallCheck2["default"])(this, MenuItem);
    return _super2.call(this);
  }

  (0, _createClass2["default"])(MenuItem, [{
    key: "ready",
    value: function () {
      var _ready2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _get2["default"])((0, _getPrototypeOf2["default"])(MenuItem.prototype), "ready", this).call(this);

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function ready() {
        return _ready2.apply(this, arguments);
      }

      return ready;
    }()
  }]);
  return MenuItem;
}(NidgetElement);

window.customElements.define('menu-item', MenuItem);
window.customElements.define('menu-container', MenuContainer);
module.exports = MenuContainer;

},{"@babel/runtime/helpers/asyncToGenerator":7,"@babel/runtime/helpers/classCallCheck":8,"@babel/runtime/helpers/createClass":10,"@babel/runtime/helpers/get":11,"@babel/runtime/helpers/getPrototypeOf":12,"@babel/runtime/helpers/inherits":13,"@babel/runtime/helpers/interopRequireDefault":14,"@babel/runtime/helpers/possibleConstructorReturn":17,"@babel/runtime/regenerator":22,"@thaerious/nidget":5}],39:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var NidgetElement = require("@thaerious/nidget").NidgetElement;

require("./CheckBox.js");

var ValueUpdate = /*#__PURE__*/function (_CustomEvent) {
  (0, _inherits2["default"])(ValueUpdate, _CustomEvent);

  var _super = _createSuper(ValueUpdate);

  function ValueUpdate(index, value, checked) {
    (0, _classCallCheck2["default"])(this, ValueUpdate);
    return _super.call(this, 'value-update', {
      detail: {
        index: index,
        value: value,
        checked: checked
      }
    });
  }

  return ValueUpdate;
}( /*#__PURE__*/(0, _wrapNativeSuper2["default"])(CustomEvent));

var MultipleChoicePresent = /*#__PURE__*/function (_NidgetElement) {
  (0, _inherits2["default"])(MultipleChoicePresent, _NidgetElement);

  var _super2 = _createSuper(MultipleChoicePresent);

  function MultipleChoicePresent() {
    var _this;

    (0, _classCallCheck2["default"])(this, MultipleChoicePresent);
    _this = _super2.call(this, "multiple-choice-present-template");
    _this.timeouts = [];
    return _this;
  }

  (0, _createClass2["default"])(MultipleChoicePresent, [{
    key: "setTimeout",
    value: function (_setTimeout) {
      function setTimeout(_x, _x2) {
        return _setTimeout.apply(this, arguments);
      }

      setTimeout.toString = function () {
        return _setTimeout.toString();
      };

      return setTimeout;
    }(function (index, value) {
      var _this2 = this;

      if (this.timeouts[index]) clearTimeout(this.timeouts[index]);
      this.timeouts[index] = setTimeout(function () {
        var event = new ValueUpdate(index, value, true);

        _this2.dispatchEvent(event);

        _this2.timeouts[index] = undefined;
      }, 300);
    })
  }, {
    key: "ready",
    value: function () {
      var _ready = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        var _this3 = this;

        var _iterator, _step, _loop, _iterator2, _step2, _loop2;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _get2["default"])((0, _getPrototypeOf2["default"])(MultipleChoicePresent.prototype), "ready", this).call(this);

              case 2:
                _iterator = _createForOfIteratorHelper(this.querySelectorAll("check-box"));

                try {
                  _loop = function _loop() {
                    var element = _step.value;
                    element.addEventListener("value-update", function (event) {
                      var index = element.parentElement.getAttribute("data-index");
                      var checked = event.detail.value === "true";
                      var value = element.parentElement.querySelector(".wager").content;
                      element.parentElement.querySelector(".wager").disabled = !checked;

                      _this3.dispatchEvent(new ValueUpdate(index, parseInt(value), checked));
                    });
                  };

                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    _loop();
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }

                _iterator2 = _createForOfIteratorHelper(this.querySelectorAll(".wager"));

                try {
                  _loop2 = function _loop2() {
                    var element = _step2.value;
                    element.addEventListener("click", function (event) {
                      element.content = "";
                    });
                    element.addEventListener("text-update", function (event) {
                      var index = element.parentElement.getAttribute("data-index");
                      var value = event.detail.content;

                      _this3.dispatchEvent(new ValueUpdate(index, parseInt(value), true));
                    });
                  };

                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                    _loop2();
                  }
                } catch (err) {
                  _iterator2.e(err);
                } finally {
                  _iterator2.f();
                }

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function ready() {
        return _ready.apply(this, arguments);
      }

      return ready;
    }()
  }, {
    key: "setMode",
    value: function setMode(mode) {
      switch (mode) {
        case "show":
          this.classList.add("show-mode");
          break;

        case "data-enter":
        default:
          this.classList.remove("show-mode");
          break;
      }
    }
  }, {
    key: "setAnswerText",
    value: function setAnswerText(index, text) {
      this.querySelector(".inner[data-index=\"".concat(index, "\"] .answer")).text = text;
    }
  }, {
    key: "setChecked",
    value: function setChecked(index, value) {
      this.querySelector(".inner[data-index=\"".concat(index, "\"] check-box")).checked = value;
    }
  }]);
  return MultipleChoicePresent;
}(NidgetElement);

window.customElements.define('multiple-choice-present', MultipleChoicePresent);
module.exports = MultipleChoicePresent;

},{"./CheckBox.js":36,"@babel/runtime/helpers/asyncToGenerator":7,"@babel/runtime/helpers/classCallCheck":8,"@babel/runtime/helpers/createClass":10,"@babel/runtime/helpers/get":11,"@babel/runtime/helpers/getPrototypeOf":12,"@babel/runtime/helpers/inherits":13,"@babel/runtime/helpers/interopRequireDefault":14,"@babel/runtime/helpers/possibleConstructorReturn":17,"@babel/runtime/helpers/wrapNativeSuper":21,"@babel/runtime/regenerator":22,"@thaerious/nidget":5}],40:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var NidgetElement = require("@thaerious/nidget").NidgetElement;

var NidgetButton = /*#__PURE__*/function (_NidgetElement) {
  (0, _inherits2["default"])(NidgetButton, _NidgetElement);

  var _super = _createSuper(NidgetButton);

  function NidgetButton() {
    (0, _classCallCheck2["default"])(this, NidgetButton);
    return _super.call(this, "nidget-button-template");
  }

  (0, _createClass2["default"])(NidgetButton, [{
    key: "ready",
    value: function () {
      var _ready = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _get2["default"])((0, _getPrototypeOf2["default"])(NidgetButton.prototype), "ready", this).call(this);

              case 2:
                this.DOM.text.innerHTML = this.innerHTML;
                this.innerHTML = "";

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function ready() {
        return _ready.apply(this, arguments);
      }

      return ready;
    }()
  }, {
    key: "disable",
    value: function disable() {
      this.classList.add("disabled");
    }
  }, {
    key: "enable",
    value: function enable() {
      this.classList.remove("disabled");
    }
  }]);
  return NidgetButton;
}(NidgetElement);

window.customElements.define('nidget-button', NidgetButton);
module.exports = NidgetButton;

},{"@babel/runtime/helpers/asyncToGenerator":7,"@babel/runtime/helpers/classCallCheck":8,"@babel/runtime/helpers/createClass":10,"@babel/runtime/helpers/get":11,"@babel/runtime/helpers/getPrototypeOf":12,"@babel/runtime/helpers/inherits":13,"@babel/runtime/helpers/interopRequireDefault":14,"@babel/runtime/helpers/possibleConstructorReturn":17,"@babel/runtime/regenerator":22,"@thaerious/nidget":5}],41:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _PlayerPanel = _interopRequireDefault(require("./PlayerPanel.js"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var NidgetElement = require("@thaerious/nidget").NidgetElement;

var PlayerContainer = /*#__PURE__*/function (_NidgetElement) {
  (0, _inherits2["default"])(PlayerContainer, _NidgetElement);

  var _super = _createSuper(PlayerContainer);

  function PlayerContainer() {
    var _this;

    var templateId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "player-container-template";
    (0, _classCallCheck2["default"])(this, PlayerContainer);
    _this = _super.call(this, templateId);
    _this.extraPlayersHidden = true;
    return _this;
  }

  (0, _createClass2["default"])(PlayerContainer, [{
    key: "ready",
    value: function () {
      var _ready = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        var _this2 = this;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _get2["default"])((0, _getPrototypeOf2["default"])(PlayerContainer.prototype), "ready", this).call(this);

              case 2:
                document.body.addEventListener("click", function (event) {
                  if (_this2.extraPlayersHidden) return;

                  _this2.querySelector(".outer").classList.add("hide-extra");

                  _this2.querySelector("#expand-button .text").innerHTML = "&#9654;";
                  _this2.extraPlayersHidden = true;
                });
                this.querySelector("#expand-button").addEventListener("click", function (event) {
                  if (_this2.extraPlayersHidden) {
                    _this2.querySelector(".outer").classList.remove("hide-extra");

                    _this2.querySelector("#expand-button .text").innerHTML = "&#9664;";
                    _this2.extraPlayersHidden = false;
                    event.stopPropagation();
                  }
                });

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function ready() {
        return _ready.apply(this, arguments);
      }

      return ready;
    }()
  }, {
    key: "addPlayer",
    value: function addPlayer(name) {
      var score = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var outer = this.querySelector(".outer");
      var expandButton = this.querySelector("#expand-button");
      var playerPanel = document.createElement("player-panel");
      playerPanel.name = name;
      playerPanel.score = score;
      this.addPlayerPanel(playerPanel);
      window.lastPanel = playerPanel;
      if (this.size > 6) expandButton.show();
      return playerPanel;
    }
  }, {
    key: "addInner",
    value: function addInner() {
      var outer = this.querySelector(".outer");
      var nextIndex = this.querySelectorAll(".inner").length;
      var element = document.createElement("nidget-element");
      element.classList.add("inner");
      element.classList.add("extra");
      element.setAttribute("style", "--index: ".concat(nextIndex));
      element.setAttribute("data-index", nextIndex);
      outer.append(element);
      return element;
    }
  }, {
    key: "getInner",
    value: function getInner(index) {
      while (this.querySelectorAll(".inner").length <= index) {
        this.addInner();
      }

      var selector = ".inner[data-index='".concat(index, "']");
      var element = this.querySelector(".inner[data-index='".concat(index, "']"));
      return element;
    }
  }, {
    key: "addPlayerPanel",
    value: function addPlayerPanel(element) {
      var innerIndex = Math.trunc(this.size / 6);
      var innerElement = this.getInner(innerIndex);
      element.setAttribute("style", "--index: ".concat(this.size % 6));
      innerElement.append(element);
    }
  }, {
    key: "size",
    get: function get() {
      return this.querySelectorAll("player-panel").length;
    }
  }, {
    key: "topPlayer",
    value: function topPlayer() {
      var currentInner = this.querySelector(".inner.first");
      return currentInner.querySelector("player-panel");
    }
  }, {
    key: "getPlayer",
    value: function getPlayer(name) {
      var _iterator = _createForOfIteratorHelper(this.querySelectorAll("player-panel")),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var panel = _step.value;
          if (panel.name === name) return panel;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return null;
    }
  }, {
    key: "moveToTop",
    value: function moveToTop(name) {
      var components = [];
      if (!this.getPlayer(name)) return;
      components.push(this.getPlayer(name));
      this.getPlayer(name).detach();

      var _iterator2 = _createForOfIteratorHelper(this.querySelectorAll("player-panel")),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var element = _step2.value;
          components.push(element);
          element.detach();
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      for (var _i = 0, _components = components; _i < _components.length; _i++) {
        var component = _components[_i];
        this.addPlayerPanel(component);
      }

      return components[0];
    }
  }, {
    key: "clear",
    value: function clear() {
      var _iterator3 = _createForOfIteratorHelper(this.querySelectorAll(".extra")),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var inner = _step3.value;
          inner.detach();
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      this.querySelector(".inner").textContent = "";
    }
  }]);
  return PlayerContainer;
}(NidgetElement);

window.customElements.define('player-container', PlayerContainer);
module.exports = PlayerContainer;

},{"./PlayerPanel.js":42,"@babel/runtime/helpers/asyncToGenerator":7,"@babel/runtime/helpers/classCallCheck":8,"@babel/runtime/helpers/createClass":10,"@babel/runtime/helpers/get":11,"@babel/runtime/helpers/getPrototypeOf":12,"@babel/runtime/helpers/inherits":13,"@babel/runtime/helpers/interopRequireDefault":14,"@babel/runtime/helpers/possibleConstructorReturn":17,"@babel/runtime/regenerator":22,"@thaerious/nidget":5}],42:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

require("./PlayerPanel.js");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var NidgetElement = require("@thaerious/nidget").NidgetElement;

var PlayerPanel = /*#__PURE__*/function (_NidgetElement) {
  (0, _inherits2["default"])(PlayerPanel, _NidgetElement);

  var _super = _createSuper(PlayerPanel);

  function PlayerPanel() {
    var templateId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "player-panel-template";
    (0, _classCallCheck2["default"])(this, PlayerPanel);
    return _super.call(this, templateId);
  }

  (0, _createClass2["default"])(PlayerPanel, [{
    key: "ready",
    value: function () {
      var _ready = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _get2["default"])((0, _getPrototypeOf2["default"])(PlayerPanel.prototype), "ready", this).call(this);

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function ready() {
        return _ready.apply(this, arguments);
      }

      return ready;
    }()
  }, {
    key: "name",
    get: function get() {
      return this.querySelector("#name").innerHTML;
    },
    set: function set(value) {
      this.querySelector("#name").innerHTML = value;
    }
  }, {
    key: "score",
    get: function get() {
      return this.querySelector("#score").innerHTML;
    },
    set: function set(value) {
      this.querySelector("#score").innerHTML = value;
    }
  }, {
    key: "dim",
    set: function set(value) {
      if (value) this.querySelector(".outer").classList.add("dim");else this.querySelector(".outer").classList.remove("dim");
    }
  }, {
    key: "highlight",
    set: function set(value) {
      if (value) this.querySelector(".outer").classList.add("highlight");else this.querySelector(".outer").classList.remove("highlight");
    }
  }, {
    key: "active",
    set: function set(value) {
      if (value) this.querySelector("#buzz-light").classList.add("active");else this.querySelector("#buzz-light").classList.remove("active");
    }
  }, {
    key: "hideClock",
    value: function hideClock() {
      this.DOM.clock.classList.add("hidden");
    }
  }, {
    key: "buzz",
    value: function buzz() {
      this.querySelector("#buzz-light").classList.add("sweep-right");
    }
  }, {
    key: "clear",
    value: function clear() {
      this.querySelector("#buzz-light").classList.remove("sweep-right");
      this.querySelector("#name").classList.remove("active");
      this.querySelector("#score").classList.remove("active");
      this.querySelectorAll(".clock-tick").forEach(function (e) {
        return e.classList.remove("spent");
      });
    }
  }, {
    key: "setTimer",
    value: function setTimer(percent) {
      if (percent <= 80) this.querySelector(".clock-tick[data-index='4']").classList.add("spent");
      if (percent <= 60) this.querySelector(".clock-tick[data-index='3']").classList.add("spent");
      if (percent <= 40) this.querySelector(".clock-tick[data-index='2']").classList.add("spent");
      if (percent <= 20) this.querySelector(".clock-tick[data-index='1']").classList.add("spent");
      if (percent <= 0) this.querySelector(".clock-tick[data-index='0']").classList.add("spent");
    }
  }]);
  return PlayerPanel;
}(NidgetElement);

window.customElements.define('player-panel', PlayerPanel);
module.exports = PlayerPanel;

},{"./PlayerPanel.js":42,"@babel/runtime/helpers/asyncToGenerator":7,"@babel/runtime/helpers/classCallCheck":8,"@babel/runtime/helpers/createClass":10,"@babel/runtime/helpers/get":11,"@babel/runtime/helpers/getPrototypeOf":12,"@babel/runtime/helpers/inherits":13,"@babel/runtime/helpers/interopRequireDefault":14,"@babel/runtime/helpers/possibleConstructorReturn":17,"@babel/runtime/regenerator":22,"@thaerious/nidget":5}],43:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var NidgetElement = require("@thaerious/nidget").NidgetElement;

var TextUpdate = /*#__PURE__*/function (_CustomEvent) {
  (0, _inherits2["default"])(TextUpdate, _CustomEvent);

  var _super = _createSuper(TextUpdate);

  function TextUpdate(text) {
    (0, _classCallCheck2["default"])(this, TextUpdate);
    return _super.call(this, 'text-update', {
      detail: {
        text: text
      }
    });
  }

  return TextUpdate;
}( /*#__PURE__*/(0, _wrapNativeSuper2["default"])(CustomEvent));

var QuestionPane = /*#__PURE__*/function (_NidgetElement) {
  (0, _inherits2["default"])(QuestionPane, _NidgetElement);

  var _super2 = _createSuper(QuestionPane);

  function QuestionPane() {
    (0, _classCallCheck2["default"])(this, QuestionPane);
    return _super2.call(this, "question-pane-template");
  }

  (0, _createClass2["default"])(QuestionPane, [{
    key: "ready",
    value: function () {
      var _ready = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
        var _this = this;

        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _get2["default"])((0, _getPrototypeOf2["default"])(QuestionPane.prototype), "ready", this).call(this);

              case 2:
                this.addEventListener("click", function () {
                  return _this.querySelector(".text-contents").focus();
                });
                this.querySelector("#text-contents").addEventListener("blur", /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
                  var text;
                  return _regenerator["default"].wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          text = _this.querySelector(".text-contents").text;

                          _this.dispatchEvent(new TextUpdate(text.trim()));

                        case 2:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                })));

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function ready() {
        return _ready.apply(this, arguments);
      }

      return ready;
    }()
  }, {
    key: "clear",
    value: function clear() {
      this.querySelector(".text-contents").text = "";
    }
  }, {
    key: "setText",
    value: function setText(text) {
      this.querySelector(".text-contents").text = text;
    }
  }]);
  return QuestionPane;
}(NidgetElement);

window.customElements.define('question-pane', QuestionPane);
module.exports = QuestionPane;

},{"@babel/runtime/helpers/asyncToGenerator":7,"@babel/runtime/helpers/classCallCheck":8,"@babel/runtime/helpers/createClass":10,"@babel/runtime/helpers/get":11,"@babel/runtime/helpers/getPrototypeOf":12,"@babel/runtime/helpers/inherits":13,"@babel/runtime/helpers/interopRequireDefault":14,"@babel/runtime/helpers/possibleConstructorReturn":17,"@babel/runtime/helpers/wrapNativeSuper":21,"@babel/runtime/regenerator":22,"@thaerious/nidget":5}],44:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var NidgetElement = require("@thaerious/nidget").NidgetElement;

var TextInput = /*#__PURE__*/function (_NidgetElement) {
  (0, _inherits2["default"])(TextInput, _NidgetElement);

  var _super = _createSuper(TextInput);

  function TextInput() {
    (0, _classCallCheck2["default"])(this, TextInput);
    return _super.call(this, "text-input-template");
  }

  (0, _createClass2["default"])(TextInput, [{
    key: "connectedCallback",
    value: function () {
      var _connectedCallback = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.sourceInnerHTML = this.innerHTML;
                _context.next = 3;
                return (0, _get2["default"])((0, _getPrototypeOf2["default"])(TextInput.prototype), "connectedCallback", this).call(this);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function connectedCallback() {
        return _connectedCallback.apply(this, arguments);
      }

      return connectedCallback;
    }()
  }, {
    key: "ready",
    value: function () {
      var _ready = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
        var _this$getAttribute,
            _this = this;

        var hint;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _get2["default"])((0, _getPrototypeOf2["default"])(TextInput.prototype), "ready", this).call(this);

              case 2:
                this.filter = (_this$getAttribute = this.getAttribute(TextInput.FILTER)) !== null && _this$getAttribute !== void 0 ? _this$getAttribute : ".*";
                hint = this.getAttribute(TextInput.HINT_ATTRIBUTE);
                this.DOM['hint'].innerHTML = hint;
                this.content = this.sourceInnerHTML;
                this.addEventListener("focus", function () {
                  _this.DOM['content'].focus();
                });
                this.DOM['content'].addEventListener("click", function () {
                  _this.DOM['hint'].innerHTML = "";
                });
                this.DOM['content'].addEventListener("blur", function () {
                  if (_this.DOM['content'].innerHTML.trim() === "") {
                    _this.DOM['hint'].innerHTML = hint;
                  }
                });
                this.DOM['content'].addEventListener("keypress", function (event) {
                  return _this.onKeypress(event);
                });
                this.DOM['content'].addEventListener("input", function (event) {
                  return _this.onInput(event);
                });

              case 11:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function ready() {
        return _ready.apply(this, arguments);
      }

      return ready;
    }()
  }, {
    key: "content",
    get: function get() {
      var string = this.DOM['content'].innerHTML;
      return string.replaceAll("&nbsp;", " ");
    },
    set: function set(value) {
      return this.DOM['content'].text = value;
    }
  }, {
    key: "setCaret",
    value: function setCaret(index) {
      var range = document.createRange();
      var sel = window.getSelection();
      range.setStart(this.DOM['content'].childNodes[0], index);
      range.collapse(true);
      sel.removeAllRanges();
      sel.addRange(range);
    }
  }, {
    key: "onInput",
    value: function onInput(event) {
      if (this.filter === "") return;
      var check = this.content.trim();
      var r = check.match("^" + this.filter + "$");

      if (!check.match("^" + this.filter + "$")) {
        this.content = this.prevContent;
        this.setCaret(this.prevCaret);
        event.stopPropagation();
        event.preventDefault();
      } else {
        this.dispatchEvent(new CustomEvent("text-update", {
          bubbles: true,
          composed: true,
          detail: {
            content: this.content
          }
        }));
      }
    }
  }, {
    key: "onKeypress",
    value: function onKeypress(event) {
      if (event.which === 13) {
        event.stopPropagation();
        event.preventDefault();
        this.dispatchEvent(new CustomEvent("text-enter", {
          bubbles: true,
          composed: true,
          detail: {
            content: this.content
          }
        }));
      }

      this.prevContent = this.content;
      this.prevCaret = this.shadowRoot.getSelection().anchorOffset;
    }
  }]);
  return TextInput;
}(NidgetElement);

TextInput.FILTER = "filter";
TextInput.HINT_ATTRIBUTE = "hint";
window.customElements.define('text-input', TextInput);
module.exports = TextInput;

},{"@babel/runtime/helpers/asyncToGenerator":7,"@babel/runtime/helpers/classCallCheck":8,"@babel/runtime/helpers/createClass":10,"@babel/runtime/helpers/get":11,"@babel/runtime/helpers/getPrototypeOf":12,"@babel/runtime/helpers/inherits":13,"@babel/runtime/helpers/interopRequireDefault":14,"@babel/runtime/helpers/possibleConstructorReturn":17,"@babel/runtime/regenerator":22,"@thaerious/nidget":5}],45:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var NidgetElement = require("@thaerious/nidget").NidgetElement;

var TriviaTimer = /*#__PURE__*/function (_NidgetElement) {
  (0, _inherits2["default"])(TriviaTimer, _NidgetElement);

  var _super = _createSuper(TriviaTimer);

  function TriviaTimer() {
    (0, _classCallCheck2["default"])(this, TriviaTimer);
    return _super.call(this, "trivia-timer-template");
  }

  (0, _createClass2["default"])(TriviaTimer, [{
    key: "start",
    value: function start(value) {
      var _this = this;

      if (value) this.set(value);
      this.timeout = setTimeout(function () {
        return _this.step();
      }, 500);
      this.running = true;
    }
  }, {
    key: "stop",
    value: function stop() {
      if (this.timeout) {
        this.running = false;
        clearTimeout();
      }
    }
  }, {
    key: "show",
    value: function show(value) {
      this.querySelector(".outer").classList.remove("cycle");

      if (value) {
        this.querySelector("#current-tick .text").innerHTML = value;
      }

      (0, _get2["default"])((0, _getPrototypeOf2["default"])(TriviaTimer.prototype), "show", this).call(this);
    }
  }, {
    key: "spin",
    value: function spin() {
      var _this2 = this;

      this.querySelector(".outer").classList.remove("cycle");
      setTimeout(function () {
        return _this2.querySelector(".outer").classList.add("cycle");
      }, 10);
      setTimeout(function () {
        return _this2.querySelector("#current-tick .text").innerHTML = _this2.querySelector("#prev-tick").innerHTML;
      }, 500);
    }
  }, {
    key: "step",
    value: function step() {
      var _this3 = this;

      if (this.value > 0 && this.running) {
        this.tick();
        this.timeout = setTimeout(function () {
          return _this3.step();
        }, 1000);
      }
    }
  }, {
    key: "set",
    value: function set(value) {
      this.querySelector("#prev-tick .text").innerHTML = value;
      this.spin();
    }
  }, {
    key: "tick",
    value: function tick(nextValue) {
      var _nextValue,
          _this4 = this;

      nextValue = (_nextValue = nextValue) !== null && _nextValue !== void 0 ? _nextValue : --this.value;
      this.querySelector("#prev-tick").innerHTML = nextValue;
      this.querySelector(".outer").classList.remove("cycle");
      setTimeout(function () {
        return _this4.querySelector(".outer").classList.add("cycle");
      }, 500);
      setTimeout(function () {
        return _this4.querySelector("#current-tick .text").innerHTML = nextValue;
      }, 900);
    }
  }]);
  return TriviaTimer;
}(NidgetElement);

window.customElements.define('trivia-timer', TriviaTimer);
module.exports = TriviaTimer;

},{"@babel/runtime/helpers/classCallCheck":8,"@babel/runtime/helpers/createClass":10,"@babel/runtime/helpers/get":11,"@babel/runtime/helpers/getPrototypeOf":12,"@babel/runtime/helpers/inherits":13,"@babel/runtime/helpers/interopRequireDefault":14,"@babel/runtime/helpers/possibleConstructorReturn":17,"@thaerious/nidget":5}],46:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var GameManagerService = /*#__PURE__*/function () {
  function GameManagerService() {
    (0, _classCallCheck2["default"])(this, GameManagerService);
  }

  (0, _createClass2["default"])(GameManagerService, [{
    key: "send",
    value:
    /**
     * @param data object to send, will get stringified by this method
     */
    function () {
      var _send = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(data) {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", new Promise(function (resolve, reject) {
                  var xhttp = new XMLHttpRequest();
                  xhttp.addEventListener("load", function (event) {
                    console.log(xhttp.responseText);
                    var response = JSON.parse(xhttp.responseText);
                    if (response.error) reject(response);else resolve(response);
                  });
                  xhttp.open("POST", GameManagerService.URL);
                  xhttp.setRequestHeader("Content-type", "application/json");
                  xhttp.send(JSON.stringify(data));
                }));

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function send(_x) {
        return _send.apply(this, arguments);
      }

      return send;
    }()
    /**
     * Retrieve the public game-hash associated with this
     * session.
     * @returns {Promise<unknown>}
     */

  }, {
    key: "getGameHash",
    value: function () {
      var _getGameHash = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.send({
                  action: "get-game-hash"
                });

              case 2:
                return _context2.abrupt("return", _context2.sent);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getGameHash() {
        return _getGameHash.apply(this, arguments);
      }

      return getGameHash;
    }()
    /**
     * Stop a hosted game and clear players.
     * @param token Google API user token
     * @returns {Promise<unknown>}
     */

  }, {
    key: "launch",
    value: function () {
      var _launch = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(token, model) {
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.send({
                  token: token,
                  model: model,
                  action: "launch"
                });

              case 2:
                return _context3.abrupt("return", _context3.sent);

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function launch(_x2, _x3) {
        return _launch.apply(this, arguments);
      }

      return launch;
    }()
    /**
     * Stop a hosted game and clear players.
     * @param token Google API user token
     * @returns {Promise<unknown>}
     */

  }, {
    key: "terminate",
    value: function () {
      var _terminate = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(token) {
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.send({
                  token: token,
                  action: "terminate"
                });

              case 2:
                return _context4.abrupt("return", _context4.sent);

              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function terminate(_x4) {
        return _terminate.apply(this, arguments);
      }

      return terminate;
    }()
    /**
     * Determine if a game as been hosted.
     * @param token Google API user token
     * @returns {Promise<unknown>}
     */

  }, {
    key: "hasGame",
    value: function () {
      var _hasGame = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(token) {
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.send({
                  token: token,
                  action: "has-game"
                });

              case 2:
                return _context5.abrupt("return", _context5.sent);

              case 3:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function hasGame(_x5) {
        return _hasGame.apply(this, arguments);
      }

      return hasGame;
    }()
  }, {
    key: "setName",
    value: function () {
      var _setName = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6(hash, name) {
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.send({
                  'game-hash': hash,
                  name: name,
                  action: "set-name"
                });

              case 2:
                return _context6.abrupt("return", _context6.sent);

              case 3:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function setName(_x6, _x7) {
        return _setName.apply(this, arguments);
      }

      return setName;
    }()
  }]);
  return GameManagerService;
}();

GameManagerService.URL = "game-manager-service";
module.exports = GameManagerService;

},{"@babel/runtime/helpers/asyncToGenerator":7,"@babel/runtime/helpers/classCallCheck":8,"@babel/runtime/helpers/createClass":10,"@babel/runtime/helpers/interopRequireDefault":14,"@babel/runtime/regenerator":22}],47:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _default = {
  savePath: "data",
  TIMES: {
    ANSWER: 10,
    BUZZ: 10,
    MULTIPLE_CHOICE: 5
  },
  sessions: {
    SESSION_EXPIRE_HOURS: 24,
    SESSION_COOKIE_NAME: "trivia-session",
    SESSION_CLEAR_DELAY_MIN: 30
  },
  nidgets: {
    SCRIPT_PATH: "./src/client/nidgets"
  },
  locations: {
    HOST: "host.ejs"
  }
}; // set SESSION_CLEAR_DELAY_MIN to -1 to disable.

exports["default"] = _default;

},{}]},{},[31,37,38,39,36,44,40,41,42,43,45])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
