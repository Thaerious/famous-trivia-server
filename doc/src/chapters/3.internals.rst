=================
Overview
=================

The program entry point is `src/server/server.js`_.
This is where the Express webserver is setup and started.
It starts the following modules and services:

* Session manager.
* Game manager service.
* CORS settings.
* Embedded JavaScript (ejs) template engine.
* Just-In-Time (JIT) javascript browserify/babel.
* The Websocket to listen for new connections.

**Settings**

* Values that are not expected to change are found in: `src/constants.js`_.
* Settings that may change are found in: `src/config.js`_.

.. _src/server/server.js: https://github.com/Thaerious/trivia-server/blob/master/src/server/server.js
.. _src/constants.js: https://github.com/Thaerious/trivia-server/blob/master/src/constants.js
.. _src/config.js: https://github.com/Thaerious/trivia-server/blob/master/src/config.js

=================
Nidgets
=================
The term "Nidget" stands for "Not-a-Widget", which is a little tongue in cheek as it is a widget.
A Widget (and a Nidget) being a reusable GUI element.  I chose Nidget as the term Widget is used quite often
already.

A Nidget consists of 3 files:

* A template .ejs file.
* A style file (either .css or .scss).
* A .js file.

Nidgets are a solution to automatically reusing template elements.  A template element holds HTML code
without actually inserting it into the DOM.  Each nidget template lives in it's own .ejs file located in the
``/views/nidgets/`` directory.

**Template File** (/views/nidgets/check-box.ejs)::

    <template id="check-box-template">
        <link rel="stylesheet" href="styles/generated/check_box.css">
        <div id="outer">
            <div id="inner"></div>
        </div>
    </template>

The template name must match the .ejs filename with dashes between words, appended with *"-template"*.
For example the "check-box-template" above would be located in the file *"check-box.ejs"*.
The root element of a Nidget template must be the html *<template>* element.
It's good practice to separate the template styling into it's own file with a stylesheet *<link>* element.

**Style File** (/src/styles/check-box.scss)::

    :host(check-box.hidden){
        display: none;
    }

    :host([nidget-disabled='true']){
        #outer{
            background-color: var(--ui-background-disabled);
        }
    }

    #outer{
        position: absolute;
        width: 100%;
        height: 100%;
        left: 0;
        top: 0;

        #inner{
            position: absolute;
        }
    }

You can access host CSS selectors with the *:host* pseudo-class function.  It is generally good practice
to have the outermost element (besides <template>) contain the entirety of the encapsulating element.
Then you can position all child elements according to this *#outer* element.  The file name of the
style sheet is specified by the link (style) element in the template file.

**JavaScript File** (/src/client/nidgets/check-box.js)::

    import NidgetElement from "./NidgetElement.js";

    class CheckBox extends NidgetElement {
        constructor() {
            super("check-box-template");
        }
    }

    window.customElements.define('check-box', CheckBox);
    export default CheckBox;

The .js file must have the same name as the template (.ejs) file.  The name
can be either camelCase for hyphen-delimited.  The constructor needs to invoke
the super constructor, passing in the template id that was set in the template file.
The custom element gets added with the hyphenated version of the name, passing in the class
as well.

Processing Nidgets
------------------
While you could add Nidget imports manually, to prevent repetition a built
`browserify <https://browserify.org/>`_ function
is provided.  This will not only browserify (and babelify) the .ejs source file,
it will also automatically inject Nidget template (.ejs) and script (.js) files.
Perform the following steps.

**Insert templates into the .ejs files (add to all root .ejs files)**::

    <%- include('../partials/nidget-templates'); %>

**Add the following to the Express server.**

Generate the html and js pages.::

    const nidgetPreprocessor = new NidgetPreprocessor(config.server.ejs_nidgets, config.server.nidget_scripts).setup();
    await JITBrowserify.render(nidgetPreprocessor);

Setup the middleware to server Browserified .js files.::

    app.get(config.server.jit_path, Express.static(config.server.public_scripts));

Setup the middleware to serve rendered .ejs files.::

    app.get("*.ejs", Express.static(config.server.pre_ejs,
        {
            setHeaders : (res, path, stat) => res.setHeader('Content-Type', 'text/html')
        }
    ));

===============
Root HTML Pages
===============
There are 6 single page applications which serve as entry points.
These are found in the '/views/pages' directory.
They are .ejs pages which compile into .html pages.
This permits the automatic injection of Nidget dependencies.

* contestant_join.ejs : the contestant enters their name to join a game.
* editor.ejs : the host edit's a game.
* host.ejs : the host's main menu where they can manage and launch games.
* launch_console.ejs : host's submenu to manage a launched game.
* contestant_portal.ejs : the contestant's game view (where they actually play).
* host_portal.ejs : the host's game view (where they actually play).

=====================
Game Manager Endpoint
=====================
The GameManagerEndpoint is the main api starting point for any client interacting with the server.
The endpoint url is "HOSTNAME/game-manager-service".  The format, exampled below, consists of
a required 'action' field.  Other required fields depend on the contents of the action field.  The
client has a corresponding  GameManagerService class which calls the endpoint actions.

All actions return a json object with the result field set to 'success', 'rejected', or 'error'.
If the result if 'error' or 'rejected' there will also be a 'reason' field.
The following actions are supported:

launch
------
Launch a new game with the user as host.
The model is result from GameDescriptionModel#get().
This method will verify the user's google credentials.
The 'game-hash' returned is used to connect to the game with
future API calls.
A user can only host one game at a time.::

  {
    'action' : 'launch',
    'model'  : game-description-model,
    'token'  : google-auth-token
  }

returns::

    res.json({
        result : "success",
        hash   : game-hash
    }

terminate
---------
Stop a currently running game.
This method will verify the user's google credentials.::

    {
        action : "terminate",
        token  : google-auth-token
    }

returns::

    res.json({
        result : "success"
    }

join-game
---------
Create a contestant with the given name.
The contestant will be associated with the current session.
Each session can only have one contestant.
The host can not also be a contestant.::

    {
        'action'    : "join-game",
        'game-hash' : game-hash,
        'name'      : string
    }

returns::

    {
        result : 'success'
    }

has-game
--------
Determine if a user is currently hosting a game.::

  {
    'action' : 'has-game',
    'token'  : google-auth-token
  }

returns::

    {
        result : 'success',
        hash   : game-hash,
    }

get-game-hash
-------------
Determine if the current session has been associated with a game (see join-game).::

    {
        'action'    : "get-game-hash"
        'game-hash' : game-hash
    }

returns::

    {
        result : 'success',
        hash   : game-hash,
    }

======================
Game Description Model
======================
The game description model (src/client/GameDescriptionModel.js) stores the questions for
a trivia game.  GameDescriptionModel#get() returns the json version of the model.  The
GameDescriptionModel class is just a helper class to manipulate the json.  The root object
(shown below) contains the game name and an array of rounds.  There are currently two flavours
of rounds, with the option to easily add more.

json root::

    {
        name : string,
        rounds : [{}, ..., {}]
    }

Jeopardy style round::

    {
        type : "categorical",
        column : [
            {
                category : string,
                font-size : string,
                cell : [
                    {
                        value : number,
                        type : "text",
                        q : string,
                        a : string
                    }
                ] x 5
            },
        ] x 6
    }

Multiple choice round::

    {
        type : "multiple_choice",
        bonus : number,
        question : string,
        answers : [
            string_1, ..., string_6
        ],
        values : [
            boolean_1, ..., boolean_6
        ]
    }

.. include:: tests.rst
